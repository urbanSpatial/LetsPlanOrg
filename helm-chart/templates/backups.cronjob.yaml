{{- if .Values.backups.enabled -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "letsplan.fullname" . }}-backups
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "letsplan.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.backups.schedule | quote }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      activeDeadlineSeconds: 2700 # 45 minutes
      template:
        spec:
          restartPolicy: Never
          {{- if .Values.volumes.app }}
          volumes:
            {{- if .Values.volumes.app.data }}
            - name: {{ include "letsplan.fullname" . }}-app-data
              persistentVolumeClaim:
                claimName: {{ include "letsplan.fullname" . }}-app-data
                readOnly: true
            {{- end }}
          {{- end }}
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                      - {{ include "letsplan.name" . }}
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                      - {{ .Release.Name }}
                    - key: component
                      operator: In
                      values:
                      - app
                  topologyKey: "kubernetes.io/hostname"
          containers:
          - name: restic-toolkit
            image: ghcr.io/jarvusinnovations/restic-toolkit:1.3.0
            imagePullPolicy: IfNotPresent
            envFrom:
            - secretRef:
                name: {{ .Values.backups.secretName }}
            env:
            - name: PGHOST
              value: {{ include "letsplan.fullname" . }}-database
            - name: PGPORT
              value: "{{ .Values.services.database.port }}"
            - name: PGDATABASE
              valueFrom:
                configMapKeyRef:
                  name: {{ include "letsplan.fullname" . }}
                  key: DB_DATABASE
            - name: PGUSER
              valueFrom:
                configMapKeyRef:
                  name: {{ include "letsplan.fullname" . }}
                  key: DB_USERNAME
            - name: PGPASSWORD
              valueFrom:
                configMapKeyRef:
                  name: {{ include "letsplan.fullname" . }}
                  key: DB_PASSWORD
            {{- if .Values.volumes.app }}
            volumeMounts:
              {{- if .Values.volumes.app.data }}
              - name: {{ include "letsplan.fullname" . }}-app-data
                mountPath: /srv/app/storage/app
              {{- end }}
            {{- end }}
            command: ["/bin/bash", "-c"]
            args:
              - |
                set -o pipefail

                echo "Snapshotting Database"
                pg_dumpall --clean \
                  | gzip --rsyncable \
                  | restic backup \
                    --host '{{ include "letsplan.fullname" . }}' \
                    --stdin \
                    --stdin-filename '{{ include "letsplan.fullname" . }}.sql.gz'

                sql_snapshot_status=$?


                {{ if .Values.volumes.app.data }}
                echo "Snapshotting Data Volume"
                restic backup /srv/app/storage/app \
                  --host '{{ include "letsplan.fullname" . }}'

                volume_snapshot_status=$?
                {{ else }}
                volume_snapshot_status=0
                {{ end }}


                echo "Pruning snapshots"
                restic forget \
                  --host '{{ include "letsplan.fullname" . }}' \
                  --keep-last {{ .Values.backups.prune.keepLast }} \
                  --keep-daily {{ .Values.backups.prune.keepDaily }} \
                  --keep-weekly {{ .Values.backups.prune.keepWeekly }}

                prune_status=$?


                {{ if .Values.backups.snitchUrl }}
                  backup_status=0

                  if [ $sql_snapshot_status -ne 0 ]; then
                    echo "Reporting failure: SQL snapshot"
                    backup_status=1
                  elif [ $volume_snapshot_status -ne 0 ]; then
                    echo "Reporting failure: Data snapshot"
                    backup_status=2
                  elif [ $prune_status -ne 0 ]; then
                    echo "Reporting failure: Prune"
                    backup_status=3
                  fi

                  wget -q -O - --post-data "s=${backup_status}" {{ .Values.backups.snitchUrl }}
                {{ end }}

{{- end }}